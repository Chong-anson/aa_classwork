c
n
req
q!
req.cookies
req
q!
req
n
res
n
req
q!
req
n
res
n
q!
req.cookies
req.methods
req
req.each_header { |header| p header } 
req
n
q!
req.each_header {  | header | p header }
req.each_header do | header | 
req.headers
req.cookies
req
n
res
re
n
q!
JSON.parse(a['_rails_lite_app_flash'])
a['_rails_lite_app_flash']
a =  Rack::Utils.parse_query(cookie_str)
 Rack::Utils.parse_query(cookie_str)
cookie_str = res.headers['Set-Cookie']
 Rack::Utils.parse_query(cookie_str)
res.headers['Set-Cookie']
res
c
exit
res
n
res
n
q!
w!
req.cookies["_rails_lite_app_flash"].split("\n")
JSON.parse(req.cookies["_rails_lite_app_flash"]).
req.cookies["_rails_lite_app_flash"]
JSON.parse(a)
a = Rack::Utils.parse_query(req.cookies["_rails_lite_app_flash"])
Rack::Utils.parse_query(req.cookies["_rails_lite_app_flash"]).split("\n")
Rack::Utils.parse_query(req.cookies["_rails_lite_app_flash"].split("\n"))
Rack::Utils.parse_query(req.cookies["_rails_lite_app_flash"])
Rack::Utils.parse_query(req.cookies)
Rack::Utils.parse_query(req.coookies)
Rack::Utils.parse_query(req.coookies
res = Rack::Response.new([], '200', {})
res = Rack::Response.new([], '200', {}
req.cookies["_rails_lite_app_flash"]
req.cookies"_rails_lite_app_flash"
req.cookies
req
n
req.cookies
erq
q!
s
q
req.cookies.methods
req.cookies
req.cookies.shift
req.cookies.keys
req.cookies.flatten
req.cookies.methods - Hash.methods
{"a":1}.merge({"b":2})
{"a":1}.merge{"b":2}
req.cookies.class0
req.cookies.methods
req.cookies
req.methods - Object.methods
req.methods - Object.method
req.fetch_header("_rails_lite_app_flash")
req.get_header("_rails_lite_app_flash")
req.cookies
req
res
n
req
c
q!
req.fetch_header
req.methods - Object.methods
req.methods - Object.method
req.methods
req
q!
req.cookies
req
q!
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")[0])
res.headers['Set-Cookie'].split("\n")
 Rack::Utils.parse_query(res.headers['Set-Cookie']).split("\n")
JSON.parse(res.headers['Set-Cookie']["_rails_lite_app_flash"])
Rack::Utils.parse_query(res.headers['Set-Cookie'])
JSON.parse(a["_rails_lite_app_flash"])
JSON.parse(a)
a = Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")[0])
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")[0])
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n"))
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")[1])
Rack::Utils.parse_query(res.headers['Set-Cookie'].split("\n")[0])
Rack::Utils.parse_query(res.headers['Set-Cookie'][0])
Rack::Utils.parse_query(res.headers['Set-Cookie'])
JSON.parse(res.headers['Set-Cookie'])
JSON.parse(a[0])
a = res.headers['Set-Cookie'].split("\n")
res.headers['Set-Cookie'].split("\n")
res.headers['Set-Cookie']
res.headers
 res.set_cookie("_rails_flash", JSON.generate({"b":1}))
 res.set_cookie("_rails_lite_app_flash", JSON.generate({"a":1}))
res.headers
res.set_header
res.methods
res
c
exit
res.headers
req.headers
req.cookies["_rails_lite_app_flash_count"]
req.cookies
JSON.parse(req.cookies)
JSON.parse(req.cookies)["_rails_lite_app_flash_count"]
require 'JSON'
req.cookies["_rails_lite_app_flash_count"]
eq.cookies["_rails_lite_app_flash_count"]
req.cookies
n
res.headers['Set-Cookie']
res
res.cookies
res
n
q!
c
n
req.cookies["_rails_lite_app_flash_count"]
prevous_count
n
prevous_count
q!
c
prevous_count
c
cc
c
q!
req.methods - Object.methods
req.cookies
req
q!
exit
action_name
http_method
c
n
c
s
n
http_method
c
cc
c
exit
req.path
req
controller_class
controller_clas
controllers
q!
n
self
n
controller
n
action_name
name
c
n
c
n
name
n
action_name
q!
c
match_data.names
match_data
q!
req.path
pattern
c
q!
pattern
a = controller_class.new
action_name
req.methods - Object.methods
req.methods
req
controller_class.new
a = controller_class.send(:new)
controller_class.send(:new)
controller_class.send(new)
controller_class.class
controller_class
exit
controller_class
req.fetch_header
req.session
req.methods.sort - Object.methods
req.methods.sort
req.path
req
q!
q1
req.params
res
req
pattern
c
n
pattern =~ req.path
req.path 
pattern
req.request_method
http_method.upcase.to_s
http_method
s
route.pattern
route
routes
s
q!
route
s
q!
matched
n
routes.first.pattern =~ req.path
